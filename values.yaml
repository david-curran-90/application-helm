# metadata
fullname: "" # defaults to .Release.Name
namespaceOverride: ""

# suppress output
quiet: false

# confgure the mandatory lables
labels: {}

# application specific settings (deployment, statefulset, daemonset)
app:
  # type: type of workload to deploy [Deployment|DaemonSet|StatefulSet] CASE SENSITIVE
  type: Deployment
  # serviceAccount: sets the existing service account to use for the app deployment
  serviceAccount: ""
  # automountServiceAccountToken - mount option for service account token
  automountServiceAccountToken: false
  labels: {}
  annotations: {}
  # replicas / maxreplicas - sets number of pods to deploy/maximum pods for HPA
  replicas: 1
  maxReplicas: ""
  # gracePeriod: sets the grace period to allow for pod termination
  gracePeriod: 10
  # tolerations to allow deployment on nodes with specific taints
  tolerations: {}
  # pullSecrets - https://kubernetes.io/docs/concepts/containers/images/#referring-to-an-imagepullsecrets-on-a-pod
  pullSecrets: []
  # nodeSelector - define the labels for selecting which node to schedule on
  nodeSelector: []
  # affinity - configure an affinity block (https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity)
  extraVolumes:
    volumes: []
  resources: {}
  # priorityClass - Set the priority class name for the pod
  priorityClass: ""
  containerSpec: {}
  # You'll need to include the following 
  # for EACH container you wish to add
  #- name: "nginx"
    # image - details of the image to use in the application
    # set a full uri for your image
  #  image: 
  #    uri: myregistry/myapp:1.0.0
  #    pullPolicy: "IfNotPresent"
    # env - environment varialbes in the Pod
  #  env: []
    # - name: myenv
    #   value: myvalue
  #  readinessProbe: {}
    # httpGet:
    #   path: /
    #   port: http
  #  livenessProbe: {}
    # httpGet:
    #   path: /
    #   port: http
  #  extraVolumes:
  #    mounts: []
  #  resources: {}
      #requests:
      #  memory: 50Mi
      #  cpu: 50m
      #limits:
      #  memory: 500Mi
      #  cpu: 200m
  #  extraPorts: []
  #  - containerPort: 80
  #    name: web
  #    protocol: 

  # include more containers #
  #- name: "container2"
  #  image:  
  #    uri: "myregistry/sidecar:1.0.0"
  #    pullPolicy: "ifNotPresent"
  #  env:
  #  - name: env
  #    value: envval
configmap:
  enabled: false
  annotations: {}
  labels: {}
  data: {}

# enables persistence, must be true for statefultsets
persistence:
  name: ""
  enabled: false
  storageClass: ""
  accessMode: "ReadWriteOnce"
  size: "10G"

service:
  enabled: false
  labels: {}
  annotations: {}
  type: "ClusterIP"
  externalPort: ""
  targetPort: ""
  loadBalancerSourceRanges: []
  nodePort: ""
  externalTrafficPolicy: ""
  cluserIP: ""
  portName: "http"
  portProtocol: "TCP"

hpa:
  enabled: false
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50

# Only one of ingress.enabled
ingress:
  enabled: false
  labels: {}
  annotations: {}
  hostName: ""
  tls:
    enabled: true
    hosts: []
    secretName: ""
